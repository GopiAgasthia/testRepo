kind: MCPTool
apiVersion: api.webmethods.io/beta
metadata:
  name: tools
  namespace: default
  version: '1.0'
  tags: []
  description: ''
spec:
  tools:
    - name: updatePet
      description: Update an existing pet by Id.
      inputSchema:
        type: object
        properties:
          id:
            type: integer
            format: int64
            example: 10
          name:
            type: string
            example: doggie
          category:
            type: object
            properties:
              id:
                type: integer
                format: int64
                example: 1
              name:
                type: string
                example: Dogs
            xml:
              name: category
          photoUrls:
            type: array
            xml:
              wrapped: true
            items:
              type: string
              xml:
                name: photoUrl
          tags:
            type: array
            xml:
              wrapped: true
            items:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                name:
                  type: string
              xml:
                name: tag
          status:
            type: string
            description: pet status in the store
            enum:
              - available
              - pending
              - sold
        required:
          - name
          - photoUrls
      x-original-path: /pet
    - name: addPet
      description: Add a new pet to the store.
      inputSchema:
        type: object
        properties:
          id:
            type: integer
            format: int64
            example: 10
          name:
            type: string
            example: doggie
          category:
            type: object
            properties:
              id:
                type: integer
                format: int64
                example: 1
              name:
                type: string
                example: Dogs
            xml:
              name: category
          photoUrls:
            type: array
            xml:
              wrapped: true
            items:
              type: string
              xml:
                name: photoUrl
          tags:
            type: array
            xml:
              wrapped: true
            items:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                name:
                  type: string
              xml:
                name: tag
          status:
            type: string
            description: pet status in the store
            enum:
              - available
              - pending
              - sold
        required:
          - name
          - photoUrls
      x-original-path: /pet
    - name: findPetsByTags
      description: >-
        Multiple tags can be provided with comma separated strings. Use tag1,
        tag2, tag3 for testing.
      inputSchema:
        type: object
        properties:
          tags:
            description: Tags to filter by
            x-parameter-location: query
            type: array
            items:
              type: string
      x-original-path: /pet/findByTags
    - name: findPetsByStatus
      description: Multiple status values can be provided with comma separated strings.
      inputSchema:
        type: object
        properties:
          status:
            description: Status values that need to be considered for filter
            x-parameter-location: query
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      x-original-path: /pet/findByStatus
  api:
    $path: /mvignesh/api_studio_project.yml
