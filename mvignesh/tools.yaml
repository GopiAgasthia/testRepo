kind: MCPTool
apiVersion: api.webmethods.io/beta
metadata:
  name: tools
  namespace: default
  version: '1.0'
  tags: []
  description: ''
spec:
  tools:
    - name: updatePet
      description: Update an existing pet by Id.
      inputSchema:
        type: object
        properties:
          id:
            type: integer
            format: int64
            example: 10
          name:
            type: string
            example: doggie
          category:
            type: object
            properties:
              id:
                type: integer
                format: int64
                example: 1
              name:
                type: string
                example: Dogs
            xml:
              name: category
          photoUrls:
            type: array
            xml:
              wrapped: true
            items:
              type: string
              xml:
                name: photoUrl
          tags:
            type: array
            xml:
              wrapped: true
            items:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                name:
                  type: string
              xml:
                name: tag
          status:
            type: string
            description: pet status in the store
            enum:
              - available
              - pending
              - sold
        required:
          - name
          - photoUrls
      x-original-path: /pet
    - name: addPet
      description: Add a new pet to the store.
      inputSchema:
        type: object
        properties:
          id:
            type: integer
            format: int64
            example: 10
          name:
            type: string
            example: doggie
          category:
            type: object
            properties:
              id:
                type: integer
                format: int64
                example: 1
              name:
                type: string
                example: Dogs
            xml:
              name: category
          photoUrls:
            type: array
            xml:
              wrapped: true
            items:
              type: string
              xml:
                name: photoUrl
          tags:
            type: array
            xml:
              wrapped: true
            items:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                name:
                  type: string
              xml:
                name: tag
          status:
            type: string
            description: pet status in the store
            enum:
              - available
              - pending
              - sold
        required:
          - name
          - photoUrls
      x-original-path: /pet
    - name: findPetsByStatus
      description: Multiple status values can be provided with comma separated strings.
      inputSchema:
        type: object
        properties:
          status:
            description: Status values that need to be considered for filter
            x-parameter-location: query
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      x-original-path: /pet/findByStatus
    - name: findPetsByTags
      description: >-
        Multiple tags can be provided with comma separated strings. Use tag1,
        tag2, tag3 for testing.
      inputSchema:
        type: object
        properties:
          tags:
            description: Tags to filter by
            x-parameter-location: query
            type: array
            items:
              type: string
      x-original-path: /pet/findByTags
    - name: getPetById
      description: Returns a single pet.
      inputSchema:
        type: object
        properties:
          petId:
            description: ID of pet to return
            x-parameter-location: path
            type: integer
            format: int64
        required:
          - petId
      x-original-path: /pet/{petId}
    - name: updatePetWithForm
      description: Updates a pet resource based on the form data.
      inputSchema:
        type: object
        properties:
          petId:
            description: ID of pet that needs to be updated
            x-parameter-location: path
            type: integer
            format: int64
          name:
            description: Name of pet that needs to be updated
            x-parameter-location: query
            type: string
          status:
            description: Status of pet that needs to be updated
            x-parameter-location: query
            type: string
        required:
          - petId
      x-original-path: /pet/{petId}
    - name: deletePet
      description: Delete a pet.
      inputSchema:
        type: object
        properties:
          api_key:
            description: api_key parameter
            x-parameter-location: header
            type: string
          petId:
            description: Pet id to delete
            x-parameter-location: path
            type: integer
            format: int64
        required:
          - petId
      x-original-path: /pet/{petId}
    - name: uploadFile
      description: Upload image of the pet.
      inputSchema:
        type: object
        properties:
          petId:
            description: ID of pet to update
            x-parameter-location: path
            type: integer
            format: int64
          additionalMetadata:
            description: Additional Metadata
            x-parameter-location: query
            type: string
          body:
            type: string
            format: binary
        required:
          - petId
          - body
      x-original-path: /pet/{petId}/uploadImage
    - name: getInventory
      description: Returns a map of status codes to quantities.
      inputSchema:
        type: object
        properties: {}
      x-original-path: /store/inventory
    - name: placeOrder
      description: Place a new order in the store.
      inputSchema:
        type: object
        properties:
          id:
            type: integer
            format: int64
            example: 10
          petId:
            type: integer
            format: int64
            example: 198772
          quantity:
            type: integer
            format: int32
            example: 7
          shipDate:
            type: string
            format: date-time
          status:
            type: string
            description: Order Status
            example: approved
            enum:
              - placed
              - approved
              - delivered
          complete:
            type: boolean
      x-original-path: /store/order
    - name: getOrderById
      description: >-
        For valid response try integer IDs with value <= 5 or > 10. Other values
        will generate exceptions.
      inputSchema:
        type: object
        properties:
          orderId:
            description: ID of order that needs to be fetched
            x-parameter-location: path
            type: integer
            format: int64
        required:
          - orderId
      x-original-path: /store/order/{orderId}
    - name: deleteOrder
      description: >-
        For valid response try integer IDs with value < 1000. Anything above
        1000 or non-integers will generate API errors.
      inputSchema:
        type: object
        properties:
          orderId:
            description: ID of the order that needs to be deleted
            x-parameter-location: path
            type: integer
            format: int64
        required:
          - orderId
      x-original-path: /store/order/{orderId}
    - name: createUser
      description: This can only be done by the logged in user.
      inputSchema:
        type: object
        properties:
          id:
            type: integer
            format: int64
            example: 10
          username:
            type: string
            example: theUser
          firstName:
            type: string
            example: John
          lastName:
            type: string
            example: James
          email:
            type: string
            example: john@email.com
          password:
            type: string
            example: '12345'
          phone:
            type: string
            example: '12345'
          userStatus:
            type: integer
            description: User Status
            format: int32
            example: 1
      x-original-path: /user
    - name: createUsersWithListInput
      description: Creates list of users with given input array.
      inputSchema:
        type: object
        properties:
          body:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                  example: 10
                username:
                  type: string
                  example: theUser
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: James
                email:
                  type: string
                  example: john@email.com
                password:
                  type: string
                  example: '12345'
                phone:
                  type: string
                  example: '12345'
                userStatus:
                  type: integer
                  description: User Status
                  format: int32
                  example: 1
              xml:
                name: user
        required:
          - body
      x-original-path: /user/createWithList
    - name: loginUser
      description: Log into the system.
      inputSchema:
        type: object
        properties:
          username:
            description: The user name for login
            x-parameter-location: query
            type: string
          password:
            description: The password for login in clear text
            x-parameter-location: query
            type: string
      x-original-path: /user/login
    - name: logoutUser
      description: Log user out of the system.
      inputSchema:
        type: object
        properties: {}
      x-original-path: /user/logout
    - name: getUserByName
      description: Get user detail based on username.
      inputSchema:
        type: object
        properties:
          username:
            description: The name that needs to be fetched. Use user1 for testing
            x-parameter-location: path
            type: string
        required:
          - username
      x-original-path: /user/{username}
    - name: updateUser
      description: This can only be done by the logged in user.
      inputSchema:
        type: object
        properties:
          username:
            description: name that need to be deleted
            x-parameter-location: path
            type: string
          id:
            type: integer
            format: int64
            example: 10
          body_username:
            type: string
            example: theUser
          firstName:
            type: string
            example: John
          lastName:
            type: string
            example: James
          email:
            type: string
            example: john@email.com
          password:
            type: string
            example: '12345'
          phone:
            type: string
            example: '12345'
          userStatus:
            type: integer
            description: User Status
            format: int32
            example: 1
        required:
          - username
      x-original-path: /user/{username}
    - name: deleteUser
      description: This can only be done by the logged in user.
      inputSchema:
        type: object
        properties:
          username:
            description: The name that needs to be deleted
            x-parameter-location: path
            type: string
        required:
          - username
      x-original-path: /user/{username}
  api:
    $path: api_studio_project.yml
