kind: InvokeAWSLambda #Naming TBD
apiVersion: api.ibm.com/v1
metadata:
  name: AWSLambdaExtension
  version: 1
  namespace: sample
spec:
  functionName: test
  qualifier: v1 # version of a function name
  invocationType: request-response #invocation type - request-response  or event 
  region: aws-us
  awsAuthType: 
      accessSecret: my-aws-secret 
      #arnalias: my-aws-arn
  tlsConnectionProfile: my-aws-con-alias # Does it need to get dereferenced in studio via $ref, in proxy, or will LWGW also have aliases? (secrets)
  input: inputMessage #optional (if empty no message is sent along with the lambda function invocation)
  output: outputMessage #optional -> by default the response
  # move the client config to aws connection alias.
  # for webm the client config can be supported as extension.
  clientConfig: # Only a subset of the client config properties are supported in the news AWS SDK for rust
    # Timeouts (in milliseconds)
    socketTimeout: 1000
    connectionTimeout: 1000
    requestTimeout: 1000
    clientExecutionTimeout: 1000
    clientRetryCount: 5
    connectionExpirationTimeout: 100
    enableExpectContinue: true
    enableGzip: true
    enableHostPrefixInjection: true
    maxConnectionIdleTime: 1000
    responseMetadataCacheSize: true
    # Retry settings
    enableThrottledRetries: true
    # Connection settings
    enableKeepAlive: true
    enableResponseMetadataCache: true
    signatureAlgorithm: test
    tcpSendBufferSizeHint: 10
    tcpReceiveBufferSizeHint: 10
  extensions:
    lw-gateway:
      apiVersion: api.ibm.com/v1
      spec:
        clientConfig:
          serverRetryCount: 3
    webm-gateway:
      apiVersion: api.ibm.com/v1 # Optional. If not present, latest version needs to be used for authoring and linting.
      spec:
        condition: (${request.httpMethod} equals POST) or (${request.headers.name} notEquals ${request.payload.jsonPath[$.customer.name]})
        lambdaConfig:
          alias: test
        clientConfig:
          retryOnErrorCount: 1
        request_processing:
          transformations:
            set:
              - key: ${request.headers.h2}
                value: test4
              - key: ${request.query.q2}
                value: ${request.payload.jsonPath[$.customer.name]}
            setPayload:
              content-types:
                - application/json: |
                              {"empid" : "1"}
                - application/xml: | 
                              <a>a<a>
                - text/plain: |
                            sample text
              defaultContentType: application/json
              xsl:
                - feature:
                    - name: test
                      value: value
                  $path: ./a/a.xsl
                  content: sdsd
            remove:
              - ${request.query.q1}
              - ${request.path}
          useIncomingHeaders: true
        response_processing:
          transformations:
            set:
              - key: ${request.headers.h2}
                value: test4
              - key: ${request.query.q2}
                value: ${request.payload.jsonPath[$.customer.name]}
            copyEntireResponse: true
            abortAPIExecutionForFailure: true 
        namespaces:
            - prefix: ps1
              URI: http://test.com
            - prefix: ps2
              URI: http://test2.com
--- 
# Open Questions:

# condition
# Answer: resolved. added as extension.

# lambdaConfig.async is missing
  # Ans: InvocationType can be mapped to async

# lambdaConfig.alias is mapped by tlsConnectionProfile? How does tlsConnectionProfile look like?

#Some lambdaConfig.clientConfig are missing in the new kind. 
# Recheck in the LWGW schema. Attributes are added - Nagarajan

#request_processing is missing
  #Added as part of extension
#response_processing is missing
  #Added as part of extension
#namespaces is missing
  #Added as part of extension